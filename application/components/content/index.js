'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _values = require('babel-runtime/core-js/object/values');

var _values2 = _interopRequireDefault(_values);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _lodash = require('lodash');

var _reactAddonsCssTransitionGroup = require('react-addons-css-transition-group');

var _reactAddonsCssTransitionGroup2 = _interopRequireDefault(_reactAddonsCssTransitionGroup);

var _markdown = require('../common/markdown');

var _markdown2 = _interopRequireDefault(_markdown);

var _message = require('../common/message');

var _message2 = _interopRequireDefault(_message);

var _urlQuery = require('../../utils/url-query');

var _urlQuery2 = _interopRequireDefault(_urlQuery);

var _getIdByPathname = require('../../utils/get-id-by-pathname');

var _getIdByPathname2 = _interopRequireDefault(_getIdByPathname);

var _patternFolder = require('../pattern/pattern-folder');

var _patternFolder2 = _interopRequireDefault(_patternFolder);

var _patternSection = require('../pattern/pattern-section');

var _patternSection2 = _interopRequireDefault(_patternSection);

var _navigate = require('../../utils/navigate');

var _navigate2 = _interopRequireDefault(_navigate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = Content;


var sortTypes = ['folder', 'pattern'];
var rateType = function rateType(item) {
	return sortTypes.indexOf(item.type);
};

function Content(props) {
	var base = props.base,
	    config = props.config,
	    location = props.location;
	var hierarchy = config.hierarchy;

	var _urlQuery$parse = _urlQuery2.default.parse(location.pathname),
	    pathname = _urlQuery$parse.pathname;

	var id = (0, _getIdByPathname2.default)(pathname, props.base);

	var fragments = id.split('/');
	var depth = fragments.length - 1;
	var up = depth > 0 ? fragments.slice(0, fragments.length - 1).join('/') : '';
	var item = (0, _navigate2.default)(id, props.navigation);

	if (!item) {
		return _react2.default.createElement(
			'div',
			{ className: 'application-container application-container--pattern' },
			_react2.default.createElement(
				'div',
				{ className: 'not-found-section' },
				_react2.default.createElement(_markdown2.default, { source: getNotFoundSource(id) })
			)
		);
	}

	var itemDefaults = { base: base, location: location };
	var items = (0, _lodash.sortBy)((0, _lodash.sortBy)(getItems(item, hierarchy, itemDefaults, props.hide), 'name'), rateType);

	return _react2.default.createElement(
		'div',
		{ className: 'application-container application-container--pattern' },
		item.type === 'folder' && _react2.default.createElement(_patternFolder2.default, {
			id: id,
			location: location,
			items: items,
			up: up,
			base: base
		}),
		item.type === 'pattern' && _react2.default.createElement(_patternSection2.default, {
			id: id,
			data: props.pattern,
			navigation: props.navigation,
			config: props.config,
			location: location,
			type: item.type,
			onDataRequest: props.onLoad,
			base: base
		}),
		_react2.default.createElement(
			_reactAddonsCssTransitionGroup2.default,
			{
				component: 'aside',
				transitionName: 'pattern-content-transition',
				className: 'messages',
				transitionEnterTimeout: 300,
				transitionLeaveTimeout: 300
			},
			props.messages.map(function (message) {
				return _react2.default.createElement(_message2.default, {
					id: message.id,
					key: message.id,
					type: message.type,
					title: message.subject,
					body: message.body || message.stack,
					pattern: String(message.pattern).trim(),
					payload: message.payload,
					retry: message.retry,
					file: message.file,
					timestamp: message.timestamp,
					onDismiss: props.onDismiss,
					onRetry: props.onRetry,
					location: location,
					base: base
				});
			})
		)
	);
}

Content.propTypes = {
	base: _react.PropTypes.string.isRequired,
	config: _react.PropTypes.object.isRequired,
	hide: _react.PropTypes.bool.isRequired,
	location: _react.PropTypes.shape({
		pathname: _react.PropTypes.string.isRequired
	}).isRequired,
	navigation: _react.PropTypes.object.isRequired,
	onDismiss: _react.PropTypes.func.isRequired,
	onLoad: _react.PropTypes.func.isRequired,
	onRetry: _react.PropTypes.func.isRequired,
	pattern: _react.PropTypes.object.isRequired,
	messages: _react.PropTypes.array.isRequired
};

function getItemName(item, hierarchy) {
	if (item.type === 'pattern') {
		return item.manifest.displayName || item.manifest.name || item.id;
	}
	var configured = hierarchy[item.id] || {};
	return configured.displayName || item.id;
}

function getNotFoundSource(id) {
	return '\n# Pattern not found\n\nWe looked everywhere and could not find pattern `' + id + '`.\n\nYou might want to navigate back to [Home](/) or use the search.\n\n---\n\nHelp us to make this message more helpful on [GitHub](https://github.com/sinnerschrader/patternplate)\n';
}

function getItems(root, hierarchy, defaults, hide) {
	if (root.type !== 'folder') {
		return [];
	}
	return (0, _values2.default)(root.children).map(selectPatternData(hierarchy, defaults, hide)).filter(function (item) {
		return item.type !== 'pattern' || item.display;
	});
}

function selectPatternData(hierarchy, defaults, hide) {
	return function (child) {
		var amend = child.type === 'pattern' ? {
			version: child.manifest.version,
			flag: child.manifest.flag,
			tags: child.manifest.tags,
			display: hide ? child.manifest.display !== false : true
		} : {};

		return (0, _extends3.default)({}, defaults, {
			id: child.id,
			name: getItemName(child, hierarchy),
			type: child.type
		}, amend);
	};
}
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,