'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _lodash = require('lodash');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _reactSideEffect = require('react-side-effect');

var _reactSideEffect2 = _interopRequireDefault(_reactSideEffect);

var _icons = require('./icons');

var _icons2 = _interopRequireDefault(_icons);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var iconNames = (0, _keys2.default)(_icons2.default);

exports.default = (0, _reactSideEffect2.default)(toState, onChange)(Icon);


function toState(propsList) {
	var list = propsList.map(function (item) {
		return item.symbol;
	}).sort();
	var symbols = (0, _lodash.uniq)(list);
	return _react2.default.createElement(IconRegistry, { symbols: symbols });
}

function onChange(registry) {
	var element = getRegistryMountPoint();
	_reactDom2.default.render(registry, element);
}

function getRegistryMountPoint() {
	var _global = global,
	    document = _global.document;

	var found = document.querySelector('[data-icon-registry]');
	if (found) {
		return found;
	}

	var created = document.createElement('div');
	created.setAttribute('data-icon-registry', true);
	document.body.appendChild(created);
	return created;
}

function Icon(props) {
	var className = (0, _classnames2.default)('icon', props.className, {
		'icon--has-description': props.description
	});

	var textStyle = { display: props.fallback ? 'none' : null };
	var xlinkHref = '#' + props.symbol;

	return _react2.default.createElement(
		'div',
		{ className: className, style: props.style },
		_react2.default.createElement(
			'div',
			{ className: 'svg-icon' },
			_react2.default.createElement(
				'svg',
				{ className: 'svg' },
				_react2.default.createElement('use', { xlinkHref: xlinkHref })
			)
		),
		_react2.default.createElement(
			'div',
			{ className: 'svg-text', style: textStyle },
			props.children
		),
		props.description && _react2.default.createElement(
			'small',
			{ className: 'icon__description' },
			props.description
		)
	);
}

Icon.propTypes = {
	symbol: _react.PropTypes.oneOf(iconNames).isRequired,
	className: _react.PropTypes.string,
	fallback: _react.PropTypes.bool.isRequired,
	children: _react.PropTypes.any,
	description: _react.PropTypes.string,
	style: _react.PropTypes.object
};

Icon.defaultProps = {
	fallback: true
};

var hiddenStyles = {
	position: 'fixed',
	height: 0,
	width: 0,
	overflow: 'hidden',
	padding: 0,
	visibility: 'hidden'
};

function IconRegistry(props) {
	return _react2.default.createElement(
		'svg',
		{ style: hiddenStyles },
		props.symbols.map(function (symbol) {
			var creator = _icons2.default[symbol] || _lodash.noop;
			var paths = creator() || [];
			return _react2.default.createElement(_Symbol, { id: symbol, key: symbol, definition: paths });
		})
	);
}

IconRegistry.propTypes = {
	symbols: _react.PropTypes.arrayOf(_react.PropTypes.oneOf(iconNames)).isRequired
};

IconRegistry.defaultProps = {
	symbols: []
};

function _Symbol(props) {
	var paths = Array.isArray(props.definition) ? props.definition : [props.definition];

	return _react2.default.createElement(
		'symbol',
		{
			id: props.id,
			viewBox: '0 0 24 24'
		},
		paths.map(function (path) {
			return _react2.default.createElement(Path, { definition: path, key: path });
		})
	);
}

_Symbol.propTypes = {
	definition: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.object, _react.PropTypes.array]).isRequired,
	id: _react.PropTypes.string.isRequired
};

function Path(props) {
	var definition = props.definition;

	var def = typeof definition === 'string' ? { d: definition } : definition;
	var tagName = def.tagName,
	    p = (0, _objectWithoutProperties3.default)(def, ['tagName']);

	var Component = tagName || 'path';
	return _react2.default.createElement(Component, p);
}

Path.propTypes = {
	definition: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.object]).isRequired
};
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,