'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _patternDemo = require('./pattern-demo');

var _patternDemo2 = _interopRequireDefault(_patternDemo);

var _patternHeader = require('./pattern-header');

var _patternHeader2 = _interopRequireDefault(_patternHeader);

var _patternToolbar = require('./pattern-toolbar');

var _patternToolbar2 = _interopRequireDefault(_patternToolbar);

var _unwrap = require('../../utils/unwrap');

var _unwrap2 = _interopRequireDefault(_unwrap);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = Pattern;


function Pattern(props) {
	var onReloadClick = props.reload;

	var onConcernChange = (0, _unwrap2.default)(props.onConcernChange, 'target.value');
	var onEnvironmentChange = (0, _unwrap2.default)(props.onEnvironmentChange, 'target.value');
	var onTypeChange = (0, _unwrap2.default)(props.onTypeChange, 'target.value');

	return _react2.default.createElement(
		'div',
		{ className: 'pattern' },
		_react2.default.createElement(_patternHeader2.default, {
			automount: props.automount,
			base: props.base,
			breadcrumbs: props.breadcrumbs,
			environment: props.environment,
			errored: props.errored,
			flag: props.flag,
			id: props.id,
			loading: props.loading,
			location: props.location,
			name: props.name,
			opacity: props.opacity,
			onReloadClick: onReloadClick,
			reloadTime: props.reloadTime,
			reloadedTime: props.reloadedTime,
			rulers: props.rulers,
			tags: props.tags,
			version: props.version
		}),
		_react2.default.createElement(_patternDemo2.default, {
			base: props.base,
			contentHeight: props.demoContentHeight,
			contentWidth: props.demoContentWidth,
			environment: props.environment,
			height: props.demoHeight,
			loading: props.loading,
			onError: props.onDemoError,
			onReady: props.onDemoReady,
			onResize: props.onDemoContentResize,
			onScroll: props.onDemoScroll,
			opacity: props.opacity,
			reloadTime: props.reloadTime,
			resizeable: props.rulers,
			resize: props.resize,
			rulers: props.rulers,
			rulerX: props.rulerX,
			rulerY: props.rulerY,
			rulerLengthX: props.rulerLengthX,
			rulerLengthY: props.rulerLengthY,
			target: props.id,
			width: props.demoWidth
		}),
		_react2.default.createElement(_patternToolbar2.default, {
			activeSource: props.activeSource,
			base: props.base,
			code: props.code,
			dependencies: props.dependencies,
			dependents: props.dependents,
			environment: props.environment,
			environments: props.environments,
			id: props.id,
			loading: props.loading,
			location: props.location,
			name: props.name,
			onConcernChange: onConcernChange,
			onEnvironmentChange: onEnvironmentChange,
			onFileRequest: props.onFileRequest,
			onTypeChange: onTypeChange,
			expanded: props.sourceExpanded
		})
	);
}

Pattern.propTypes = {
	automount: _react.PropTypes.bool.isRequired,
	activeSource: _react.PropTypes.string.isRequired,
	base: _react.PropTypes.string.isRequired,
	breadcrumbs: _react.PropTypes.arrayOf(_react.PropTypes.shape({
		id: _react.PropTypes.string.isRequired,
		name: _react.PropTypes.string.isRequired,
		target: _react.PropTypes.shape({
			pathname: _react.PropTypes.string.isRequired,
			query: _react.PropTypes.object.isRequired
		}).isRequired
	})),
	code: _react.PropTypes.arrayOf(_react.PropTypes.shape({
		active: _react.PropTypes.bool.isRequired,
		extname: _react.PropTypes.string.isRequired,
		concern: _react.PropTypes.string.isRequired,
		concerns: _react.PropTypes.arrayOf(_react.PropTypes.string).isRequired,
		id: _react.PropTypes.string.isRequired,
		language: _react.PropTypes.string.isRequired,
		name: _react.PropTypes.string.isRequired,
		source: _react.PropTypes.string,
		type: _react.PropTypes.string,
		types: _react.PropTypes.arrayOf(_react.PropTypes.string).isRequired
	})).isRequired,
	demoContentWidth: _react.PropTypes.number.isRequired,
	demoContentHeight: _react.PropTypes.number.isRequired,
	demoWidth: _react.PropTypes.number,
	demoHeight: _react.PropTypes.number,
	dependencies: _react.PropTypes.arrayOf(_react.PropTypes.shape({
		id: _react.PropTypes.string.isRequired,
		name: _react.PropTypes.string.isRequired,
		localName: _react.PropTypes.string.isRequired
	})).isRequired,
	dependents: _react.PropTypes.arrayOf(_react.PropTypes.shape({
		id: _react.PropTypes.string.isRequired,
		name: _react.PropTypes.string.isRequired
	})).isRequired,
	environment: _react.PropTypes.string.isRequired,
	environments: _react.PropTypes.arrayOf(_react.PropTypes.shape({
		id: _react.PropTypes.string.isRequired,
		name: _react.PropTypes.string.isRequired
	})).isRequired,
	errored: _react.PropTypes.bool.isRequired,
	flag: _react.PropTypes.string,
	id: _react.PropTypes.string.isRequired,
	loading: _react.PropTypes.bool.isRequired,
	location: _react.PropTypes.shape({
		pathname: _react.PropTypes.string.isRequired,
		query: _react.PropTypes.object.isRequired
	}).isRequired,
	name: _react.PropTypes.string.isRequired,
	onDemoContentResize: _react.PropTypes.func.isRequired,
	onDemoError: _react.PropTypes.func.isRequired,
	onDemoReady: _react.PropTypes.func.isRequired,
	onDemoScroll: _react.PropTypes.func.isRequired,
	onEnvironmentChange: _react.PropTypes.func.isRequired,
	onConcernChange: _react.PropTypes.func.isRequired,
	onFileRequest: _react.PropTypes.func.isRequired,
	onTypeChange: _react.PropTypes.func.isRequired,
	opacity: _react.PropTypes.bool.isRequired,
	reload: _react.PropTypes.func.isRequired,
	reloadTime: _react.PropTypes.number,
	reloadedTime: _react.PropTypes.number,
	resize: _react.PropTypes.func.isRequired,
	rulers: _react.PropTypes.bool.isRequired,
	rulerX: _react.PropTypes.number.isRequired,
	rulerY: _react.PropTypes.number.isRequired,
	rulerLengthX: _react.PropTypes.number.isRequired,
	rulerLengthY: _react.PropTypes.number.isRequired,
	tags: _react.PropTypes.arrayOf(_react.PropTypes.string).isRequired,
	version: _react.PropTypes.string,
	sourceExpanded: _react.PropTypes.bool
};
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,