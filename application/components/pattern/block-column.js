'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

exports.default = BlockColumn;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _block = require('./block');

var _block2 = _interopRequireDefault(_block);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function BlockColumn(props) {
	var activeBlock = props.activeBlock,
	    align = props.align,
	    base = props.base,
	    items = props.items,
	    x = props.x,
	    y = props.y,
	    location = props.location,
	    connect = props.connect,
	    height = props.height,
	    onClick = props.onClick,
	    onMouseEnter = props.onMouseEnter,
	    onMouseLeave = props.onMouseLeave;


	return _react2.default.createElement(
		'g',
		null,
		items.map(function (_ref, index) {
			var name = _ref.name,
			    id = _ref.id,
			    localName = _ref.localName;

			var label = [name, localName].join('');
			var width = Math.max(5, label.length * 0.8);
			var offset = align === 'right' ? width + 1 : 0;
			var n = (50 - width) / 3;
			var key = [id, name, localName].filter(Boolean).join(':');

			return _react2.default.createElement(_block2.default, {
				active: activeBlock === key,
				type: 'block',
				base: base,
				id: id,
				blockId: key,
				name: name,
				x: x - offset,
				key: key,
				y: y + index * (height + 1),
				width: width,
				height: height,
				connect: (0, _extends3.default)({}, connect, { n: n }),
				onClick: onClick,
				onMouseEnter: onMouseEnter,
				onMouseLeave: onMouseLeave,
				location: location
			});
		}),
		items.map(function (_ref2, index) {
			var name = _ref2.name,
			    localName = _ref2.localName,
			    id = _ref2.id;

			var label = [name, localName].join('');
			var text = align === 'right' ? localName : id;
			var width = Math.max(5, label.length * 0.8);
			var labelWidth = Math.max(4, text.length * 0.6);
			var key = [id, name, localName].filter(Boolean).join(':');
			var labelX = align === 'right' ? x - width : x + width;
			var offset = align === 'right' ? 1 : 0;
			return _react2.default.createElement(Label, {
				active: activeBlock === key,
				align: align,
				key: key,
				width: labelWidth,
				height: 1.4,
				x: labelX - offset,
				y: y + index * (height + 1) + height / 2 - 0.7,
				text: text
			});
		}),
		items.map(function (item) {
			var labelAlign = align === 'left' ? 'right' : 'left';
			var text = align === 'right' ? item.id : item.localName;
			var key = [item.id, item.name, item.localName].filter(Boolean).join(':');
			var labelWidth = Math.max(4, text.length * 0.6);

			return _react2.default.createElement(Label, {
				active: activeBlock === key,
				align: labelAlign,
				key: key,
				text: text,
				width: labelWidth,
				height: 1.4,
				x: connect.x,
				y: connect.y - 0.7
			});
		})
	);
}

BlockColumn.propTypes = {
	base: _react.PropTypes.string.isRequired,
	items: _react.PropTypes.arrayOf(_react.PropTypes.shape({
		name: _react.PropTypes.string.isRequired,
		id: _react.PropTypes.string.isRequired
	})).isRequired,
	x: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.number]).isRequired,
	y: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.number]).isRequired,
	onClick: _react.PropTypes.func.isRequired,
	align: _react.PropTypes.oneOf(['left', 'right']).isRequired,
	prefix: _react.PropTypes.string,
	location: _react.PropTypes.shape({
		pathname: _react.PropTypes.string,
		query: _react.PropTypes.any
	}),
	connect: _react.PropTypes.shape({
		x: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.number]).isRequired,
		y: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.number]).isRequired
	}).isRequired,
	description: _react.PropTypes.string,
	height: _react.PropTypes.number
};

BlockColumn.defaultProps = {
	items: [],
	y: 0,
	onClick: function onClick() {},
	align: 'left',
	description: ''
};

function Label(props) {
	if (!props.text) {
		return null;
	}

	var x = props.align === 'right' ? props.x - props.width : props.x;
	var className = (0, _classnames2.default)('label', {
		'label--active': props.active
	});

	return _react2.default.createElement(
		'g',
		{ className: className },
		_react2.default.createElement('circle', {
			className: 'label__circle',
			cx: x + props.width,
			cy: props.y + props.height / 2,
			r: 0.7
		}),
		_react2.default.createElement('circle', {
			className: 'label__circle',
			cx: x,
			cy: props.y + props.height / 2,
			r: 0.7
		}),
		_react2.default.createElement('rect', {
			height: props.height,
			width: props.width,
			x: x,
			y: props.y,
			className: 'label__container'
		}),
		_react2.default.createElement(
			'text',
			{
				x: x + props.width / 2,
				y: props.y - 0.175 + props.height / 2,
				className: 'label__text' },
			props.text
		)
	);
}
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,