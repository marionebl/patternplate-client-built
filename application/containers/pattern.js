'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _entries = require('babel-runtime/core-js/object/entries');

var _entries2 = _interopRequireDefault(_entries);

var _values = require('babel-runtime/core-js/object/values');

var _values2 = _interopRequireDefault(_values);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _lodash = require('lodash');

var _reactRedux = require('react-redux');

var _redux = require('redux');

var _shortid = require('shortid');

var _shortid2 = _interopRequireDefault(_shortid);

var _urlQuery = require('../utils/url-query');

var _urlQuery2 = _interopRequireDefault(_urlQuery);

var _navigate = require('../utils/navigate');

var _navigate2 = _interopRequireDefault(_navigate);

var _pattern = require('../components/pattern');

var _pattern2 = _interopRequireDefault(_pattern);

var _actions = require('../actions');

var _patternDemoError = require('../actions/pattern-demo-error');

var _patternDemoError2 = _interopRequireDefault(_patternDemoError);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = (0, _reactRedux.connect)(mapState, mapDispatch)(_pattern2.default);


function mapState(state) {
	return {
		activeSource: state.sourceId || '',
		automount: selectAutomount(state),
		base: state.base,
		breadcrumbs: selectBreadCrumbs(state),
		code: selectCode(state),
		rulerX: selectRulerXFraction(state),
		rulerY: selectRulerYFraction(state),
		rulerLengthX: selectRulerLengthX(state),
		rulerLengthY: selectRulerLengthY(state),
		demoContentHeight: selectDemoContentHeight(state),
		demoContentWidth: selectDemoContentWidth(state),
		demoHeight: selectHeight(state),
		demoWidth: selectWidth(state),
		dependencies: selectDependencies(state),
		dependents: selectDependents(state),
		display: selectDisplay(state),
		environment: state.environment,
		environments: selectEnvironments(state),
		errored: selectPatternErrored(state),
		flag: selectFlag(state),
		id: selectId(state),
		loading: selectLoading(state),
		location: selectLocation(state),
		name: selectName(state),
		onDemoReady: selectOnDemoReloaded(state),
		opacity: state.opacity,
		reloadedTime: selectReloadedTime(state),
		reloadTime: selectReloadTime(state),
		rulers: state.rulers,
		sourceExpanded: state.sourceExpanded,
		tags: selectTags(state),
		version: selectVersion(state)
	};
}

function mapDispatch(dispatch) {
	return (0, _redux.bindActionCreators)({
		onConcernChange: _actions.changeConcern,
		onDemoError: _patternDemoError2.default,
		onDemoReady: function onDemoReady() {
			return (0, _actions.loadPatternDemo)(false);
		},
		onDemoContentResize: _actions.demoContentResize,
		onDemoScroll: _actions.scrollDemo,
		onEnvironmentChange: _actions.changeEnvironment,
		onFileRequest: _actions.loadPatternFile,
		reload: _actions.loadPattern,
		resize: _actions.resizeDemo,
		onTypeChange: _actions.changeType
	}, dispatch);
}

function selectWidth(state) {
	var dim = state.demoDimensions[state.id] || {};
	return isNaN(dim.x) ? selectWindowWidth(state) / 2 : dim.x;
}

function selectHeight(state) {
	var dim = state.demoDimensions[state.id] || {};
	return isNaN(dim.y) ? selectWindowHeight(state) / 2 : dim.y;
}

function selectDemoContentWidth(state) {
	var dim = state.demoContentDimensions[state.id] || {};
	return dim.width || 0;
}

function selectDemoContentHeight(state) {
	var dim = state.demoContentDimensions[state.id] || {};
	return dim.height || 0;
}

function selectRulerXFraction(state) {
	var length = selectRulerLengthX(state);
	var scrollX = state.scrollDemoX.x;
	return scrollX / (length / 100);
}

function selectRulerYFraction(state) {
	var length = selectRulerLengthY(state);
	var scrollY = state.scrollDemoY.y;
	return scrollY / (length / 100);
}

function selectRulerLengthX(state) {
	var width = selectDemoContentWidth(state);
	var windowWidth = selectWindowWidth(state);
	return width * 2 + Math.abs(windowWidth - width);
}

function selectRulerLengthY(state) {
	var height = selectDemoContentHeight(state);
	var windowHeight = selectWindowHeight(state);
	return height * 2 + Math.abs(windowHeight - height);
}

function selectWindowWidth(state) {
	return (state.window || {}).width || 0;
}

function selectWindowHeight(state) {
	return (state.window || {}).height || 0;
}

function selectBreadCrumbs(state) {
	var fragments = selectId(state).split('/');
	var location = selectLocation(state);

	if (fragments.length < 2) {
		return [];
	}

	return fragments.map(function (fragment, index) {
		var partial = fragments.slice(0, index + 1).join('/');
		return {
			id: partial,
			name: fragment,
			navigateable: index < fragments.length - 1,
			target: {
				pathname: state.base + 'pattern/' + partial,
				query: location.query
			}
		};
	});
}

function selectPattern(state) {
	var cached = (0, _navigate2.default)(state.id, state.navigation);
	return (0, _lodash.merge)({}, cached, state.pattern);
}

function selectManifest(state) {
	var pattern = selectPattern(state);
	return pattern.manifest || {};
}

function selectManifestOptions(state) {
	var manifest = selectManifest(state);
	return manifest.options || {};
}

function selectReactMarkup(state) {
	var options = selectManifestOptions(state);
	return options['react-to-markup'] || {};
}

function selectReactMarkupOptions(state) {
	var markup = selectReactMarkup(state);
	return markup.opts || {};
}

function selectAutomount(state) {
	var opts = selectReactMarkupOptions(state);
	return 'automount' in opts ? opts.automount : false;
}

function getManifestSelector(name, defaultValue) {
	return function (state) {
		var manifest = selectManifest(state);
		var value = manifest[name];
		return typeof value === 'undefined' ? defaultValue : value;
	};
}

function selectId(state) {
	return state.id || selectPattern(state).id;
}

function selectName(state) {
	var pattern = selectPattern(state);
	var name = getManifestSelector('name')(state);
	var displayName = getManifestSelector('displayName')(state);
	return displayName || name || pattern.id || '';
}

function selectEnvironments(state) {
	var environments = selectPattern(state).environments || [];
	return environments.map(function (env) {
		return {
			id: env.name,
			name: env.displayName || env.name
		};
	});
}

function selectFlag(state) {
	return getManifestSelector('flag', '')(state);
}

function selectTags(state) {
	return getManifestSelector('tags', [])(state);
}

function selectVersion(state) {
	return getManifestSelector('version', '')(state);
}

function selectDisplay(state) {
	return getManifestSelector('display', true)(state);
}

function selectDependentPatterns(state) {
	return selectPattern(state).dependents || {};
}

function selectDependents(state) {
	return (0, _values2.default)(selectDependentPatterns(state)).filter(function (pattern) {
		return pattern.display;
	}).reduce(function (registry, pattern) {
		var navPattern = (0, _navigate2.default)(pattern.id, state.navigation) || { manifest: {} };
		var patternEntries = (0, _entries2.default)(navPattern.manifest.patterns || {});
		var localNames = patternEntries.filter(function (entry) {
			return entry[1] === state.id;
		}).map(function (entry) {
			return entry[0];
		});

		var amend = localNames.map(function (localName) {
			return {
				id: pattern.id,
				name: pattern.displayName || pattern.name,
				localName: localName,
				version: pattern.version
			};
		});

		return [].concat((0, _toConsumableArray3.default)(registry), (0, _toConsumableArray3.default)(amend));
	}, []);
}

function selectDependencies(state) {
	var rootPattern = selectPattern(state);
	return (0, _entries2.default)(rootPattern.dependencies || {}).filter(function (entry) {
		return entry[0] !== 'Pattern';
	}).filter(function (entry) {
		return entry[1].manifest.display;
	}).map(function (entry) {
		var _entry = (0, _slicedToArray3.default)(entry, 2),
		    localName = _entry[0],
		    pattern = _entry[1];

		var navPattern = (0, _navigate2.default)(pattern.id, state.navigation) || { manifest: {} };

		return {
			id: pattern.id,
			name: navPattern.manifest.displayName || navPattern.manifest.name,
			localName: localName,
			version: navPattern.manifest.version
		};
	});
}

function selectLoading(state) {
	var pattern = selectPattern(state);
	return [pattern.dataLoading, pattern.demoLoading, pattern.sourceLoading].some(Boolean);
}

function selectReloadTime(state) {
	var pattern = selectPattern(state);
	return pattern.reloadTime || null;
}

function selectReloadedTime(state) {
	var pattern = selectPattern(state);
	return pattern.reloadedTime || null;
}

function selectLocation(state) {
	return state.routing.locationBeforeTransitions;
}

function selectOnDemoReloaded(state) {
	var pattern = selectPattern(state);
	return pattern.onDemoReloaded || _lodash.noop;
}

function selectPatternErrors(state) {
	return selectPattern(state).errors || [];
}

function selectPatternErrored(state) {
	var pattern = selectPattern(state);
	return [pattern.dataErrored, pattern.demoErrored, pattern.sourceErrored].some(Boolean);
}

function selectCode(state) {
	var pattern = selectPattern(state);
	var sources = pattern.sources || {};
	var files = pattern.files || [];
	var errors = selectPatternErrors(state);

	var formats = (0, _lodash.uniqBy)(files.reduce(function (registry, file) {
		return [].concat((0, _toConsumableArray3.default)(registry), [{
			id: [pattern.id, file.type].join('/'),
			displayName: file.displayName,
			inExtname: _path2.default.extname(file.path),
			outExtname: '.' + file.out,
			type: file.type,
			in: file.in,
			out: file.out
		}]);
	}, []), 'id');

	return formats.map(function (format) {
		var formatFiles = files.filter(function (file) {
			return file.type === format.type;
		});
		var concerns = formatFiles.map(function (file) {
			return file.concern;
		});

		var hasDemo = concerns.includes('demo');
		var defaultConcern = hasDemo ? 'demo' : 'index';
		var parsed = _urlQuery2.default.parse(state.sourceId || '');

		var passedConcern = _path2.default.basename(parsed.pathname, _path2.default.extname(parsed.pathname)) || defaultConcern;

		var isApplicable = concerns.includes(passedConcern);

		var concern = isApplicable ? passedConcern : defaultConcern;

		var sourceType = format.type === 'documentation' ? 'source' : state.sourceType;
		var language = sourceType === 'source' ? format.in : format.out;
		var extname = format.inExtname;
		var pathname = [pattern.id, '' + concern + extname].join('/');
		var types = hasDemo && concern === 'index' ? ['source'] : ['source', 'transformed'];
		var type = hasDemo && concern === 'index' ? 'source' : sourceType;

		var id = _urlQuery2.default.format({
			pathname: pathname,
			query: {
				type: type,
				environment: state.environment
			}
		});

		var source = sources[id];
		var active = state.sourceId === id;

		var fileErrors = errors.filter(function (error) {
			return error.payload ? error.payload.id === id : error.patternFile === id;
		});

		var update = active && !source && !pattern.sourceLoading && !fileErrors.length;

		return {
			active: active,
			update: update,
			extname: extname,
			concern: concern,
			concerns: concerns,
			id: id,
			shortid: (0, _shortid2.default)(id),
			language: language,
			name: format.displayName,
			source: source || '',
			type: type,
			types: types
		};
	});
}
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,