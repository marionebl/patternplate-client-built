'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _entries = require('babel-runtime/core-js/object/entries');

var _entries2 = _interopRequireDefault(_entries);

var _lodash = require('lodash');

var _reactRedux = require('react-redux');

var _redux = require('redux');

var _application = require('../components/application');

var _application2 = _interopRequireDefault(_application);

var _actions = require('../actions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = (0, _reactRedux.connect)(mapProps, mapDispatch)(_application2.default);


function mapProps(state, own) {
	return {
		activePattern: state.id,
		base: state.base,
		description: selectDescription(state),
		depth: state.depth,
		expanded: state.expanded,
		hide: state.hide,
		hierarchy: state.config.hierarchy,
		issue: state.issue,
		lightbox: state.lightbox,
		menuEnabled: state.menuEnabled,
		navigation: state.search ? state.searchMatches : selectNavigation(state),
		pathname: own.location.pathname,
		query: own.location.query,
		search: own.location.query.search,
		startBase: state.startBase,
		styles: state.styles,
		theme: state.theme,
		themeLoading: selectThemeLoading(state),
		title: state.config.title || state.schema.name,
		version: selectVersion(state)
	};
}

function mapDispatch(dispatch) {
	return (0, _redux.bindActionCreators)({
		onResize: _actions.windowResize,
		onSearch: _actions.search,
		onThemeLoaded: _actions.themeLoaded,
		onThemeChange: _actions.toggleTheme,
		requestSearchBlur: function requestSearchBlur() {
			return (0, _actions.toggleSearchFocus)(false);
		}
	}, dispatch);
}

function selectNavigation(state) {
	return sanitizeNavigationTreeData({ children: state.navigation }, state.hide);
}

function selectDescription(state) {
	return selectSchema(state).description || '';
}

function selectVersion(state) {
	return selectSchema(state).version || '';
}

function selectSchema(state) {
	return state.schema || {};
}

function selectThemeLoading(state) {
	return state.styles.length > 1;
}

function sanitizeNavigationTreeData(data, hide) {
	if (data.manifest) {
		return hide && data.manifest.display === false ? null : data;
	}

	return (0, _entries2.default)(data.children).reduce(function (results, entry) {
		var _entry = (0, _slicedToArray3.default)(entry, 2),
		    name = _entry[0],
		    child = _entry[1];

		var grandChildren = sanitizeNavigationTreeData(child, hide);
		if (grandChildren && (0, _keys2.default)(grandChildren).length > 0) {
			results[name] = child;
		}
		return results;
	}, {});
}
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NvdXJjZS9hcHBsaWNhdGlvbi9jb250YWluZXJzL2FwcGxpY2F0aW9uLmpzIl0sIm5hbWVzIjpbIm1hcFByb3BzIiwibWFwRGlzcGF0Y2giLCJzdGF0ZSIsIm93biIsImFjdGl2ZVBhdHRlcm4iLCJpZCIsImJhc2UiLCJkZXNjcmlwdGlvbiIsInNlbGVjdERlc2NyaXB0aW9uIiwiZGVwdGgiLCJleHBhbmRlZCIsImhpZGUiLCJoaWVyYXJjaHkiLCJjb25maWciLCJpc3N1ZSIsImxpZ2h0Ym94IiwibWVudUVuYWJsZWQiLCJuYXZpZ2F0aW9uIiwic2VhcmNoIiwic2VhcmNoTWF0Y2hlcyIsInNlbGVjdE5hdmlnYXRpb24iLCJwYXRobmFtZSIsImxvY2F0aW9uIiwicXVlcnkiLCJzdGFydEJhc2UiLCJzdHlsZXMiLCJ0aGVtZSIsInRoZW1lTG9hZGluZyIsInNlbGVjdFRoZW1lTG9hZGluZyIsInRpdGxlIiwic2NoZW1hIiwibmFtZSIsInZlcnNpb24iLCJzZWxlY3RWZXJzaW9uIiwiZGlzcGF0Y2giLCJvblJlc2l6ZSIsIm9uU2VhcmNoIiwib25UaGVtZUxvYWRlZCIsIm9uVGhlbWVDaGFuZ2UiLCJyZXF1ZXN0U2VhcmNoQmx1ciIsInNhbml0aXplTmF2aWdhdGlvblRyZWVEYXRhIiwiY2hpbGRyZW4iLCJzZWxlY3RTY2hlbWEiLCJsZW5ndGgiLCJkYXRhIiwibWFuaWZlc3QiLCJkaXNwbGF5IiwicmVkdWNlIiwicmVzdWx0cyIsImVudHJ5IiwiY2hpbGQiLCJncmFuZENoaWxkcmVuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7OztBQUVBOzs7O2tCQUVlLHlCQUFRQSxRQUFSLEVBQWtCQyxXQUFsQix3Qjs7O0FBRWYsU0FBU0QsUUFBVCxDQUFrQkUsS0FBbEIsRUFBeUJDLEdBQXpCLEVBQThCO0FBQzdCLFFBQU87QUFDTkMsaUJBQWVGLE1BQU1HLEVBRGY7QUFFTkMsUUFBTUosTUFBTUks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Y2F0aW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHttZXJnZX0gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7Y29ubmVjdH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IHtiaW5kQWN0aW9uQ3JlYXRvcnN9IGZyb20gJ3JlZHV4JztcbmltcG9ydCBBcHBsaWNhdGlvbiBmcm9tICcuLi9jb21wb25lbnRzL2FwcGxpY2F0aW9uJztcblxuaW1wb3J0IHtzZWFyY2gsIHRoZW1lTG9hZGVkLCB0b2dnbGVTZWFyY2hGb2N1cywgdG9nZ2xlVGhlbWUsIHdpbmRvd1Jlc2l6ZX0gZnJvbSAnLi4vYWN0aW9ucyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QobWFwUHJvcHMsIG1hcERpc3BhdGNoKShBcHBsaWNhdGlvbik7XG5cbmZ1bmN0aW9uIG1hcFByb3BzKHN0YXRlLCBvd24pIHtcblx0cmV0dXJuIHtcblx0XHRhY3RpdmVQYXR0ZXJuOiBzdGF0ZS5pZCxcblx0XHRiYXNlOiBzdGF0ZS5iYXNlLFxuXHRcdGRlc2NyaXB0aW9uOiBzZWxlY3REZXNjcmlwdGlvbihzdGF0ZSksXG5cdFx0ZGVwdGg6IHN0YXRlLmRlcHRoLFxuXHRcdGV4cGFuZGVkOiBzdGF0ZS5leHBhbmRlZCxcblx0XHRoaWRlOiBzdGF0ZS5oaWRlLFxuXHRcdGhpZXJhcmNoeTogc3RhdGUuY29uZmlnLmhpZXJhcmNoeSxcblx0XHRpc3N1ZTogc3RhdGUuaXNzdWUsXG5cdFx0bGlnaHRib3g6IHN0YXRlLmxpZ2h0Ym94LFxuXHRcdG1lbnVFbmFibGVkOiBzdGF0ZS5tZW51RW5hYmxlZCxcblx0XHRuYXZpZ2F0aW9uOiBzdGF0ZS5zZWFyY2ggPyBzdGF0ZS5zZWFyY2hNYXRjaGVzIDogc2VsZWN0TmF2aWdhdGlvbihzdGF0ZSksXG5cdFx0cGF0aG5hbWU6IG93bi5sb2NhdGlvbi5wYXRobmFtZSxcblx0XHRxdWVyeTogb3duLmxvY2F0aW9uLnF1ZXJ5LFxuXHRcdHNlYXJjaDogb3duLmxvY2F0aW9uLnF1ZXJ5LnNlYXJjaCxcblx0XHRzdGFydEJhc2U6IHN0YXRlLnN0YXJ0QmFzZSxcblx0XHRzdHlsZXM6IHN0YXRlLnN0eWxlcyxcblx0XHR0aGVtZTogc3RhdGUudGhlbWUsXG5cdFx0dGhlbWVMb2FkaW5nOiBzZWxlY3RUaGVtZUxvYWRpbmcoc3RhdGUpLFxuXHRcdHRpdGxlOiBzdGF0ZS5jb25maWcudGl0bGUgfHwgc3RhdGUuc2NoZW1hLm5hbWUsXG5cdFx0dmVyc2lvbjogc2VsZWN0VmVyc2lvbihzdGF0ZSlcblx0fTtcbn1cblxuZnVuY3Rpb24gbWFwRGlzcGF0Y2goZGlzcGF0Y2gpIHtcblx0cmV0dXJuIGJpbmRBY3Rpb25DcmVhdG9ycyh7XG5cdFx0b25SZXNpemU6IHdpbmRvd1Jlc2l6ZSxcblx0XHRvblNlYXJjaDogc2VhcmNoLFxuXHRcdG9uVGhlbWVMb2FkZWQ6IHRoZW1lTG9hZGVkLFxuXHRcdG9uVGhlbWVDaGFuZ2U6IHRvZ2dsZVRoZW1lLFxuXHRcdHJlcXVlc3RTZWFyY2hCbHVyOiAoKSA9PiB0b2dnbGVTZWFyY2hGb2N1cyhmYWxzZSlcblx0fSwgZGlzcGF0Y2gpO1xufVxuXG5mdW5jdGlvbiBzZWxlY3ROYXZpZ2F0aW9uKHN0YXRlKSB7XG5cdHJldHVybiBzYW5pdGl6ZU5hdmlnYXRpb25UcmVlRGF0YSh7Y2hpbGRyZW46IHN0YXRlLm5hdmlnYXRpb259LCBzdGF0ZS5oaWRlKTtcbn1cblxuZnVuY3Rpb24gc2VsZWN0RGVzY3JpcHRpb24oc3RhdGUpIHtcblx0cmV0dXJuIHNlbGVjdFNjaGVtYShzdGF0ZSkuZGVzY3JpcHRpb24gfHwgJyc7XG59XG5cbmZ1bmN0aW9uIHNlbGVjdFZlcnNpb24oc3RhdGUpIHtcblx0cmV0dXJuIHNlbGVjdFNjaGVtYShzdGF0ZSkudmVyc2lvbiB8fCAnJztcbn1cblxuZnVuY3Rpb24gc2VsZWN0U2NoZW1hKHN0YXRlKSB7XG5cdHJldHVybiBzdGF0ZS5zY2hlbWEgfHwge307XG59XG5cbmZ1bmN0aW9uIHNlbGVjdFRoZW1lTG9hZGluZyhzdGF0ZSkge1xuXHRyZXR1cm4gc3RhdGUuc3R5bGVzLmxlbmd0aCA+IDE7XG59XG5cbmZ1bmN0aW9uIHNhbml0aXplTmF2aWdhdGlvblRyZWVEYXRhKGRhdGEsIGhpZGUpIHtcblx0aWYgKGRhdGEubWFuaWZlc3QpIHtcblx0XHRyZXR1cm4gaGlkZSAmJiBkYXRhLm1hbmlmZXN0LmRpc3BsYXkgPT09IGZhbHNlID8gbnVsbCA6IGRhdGE7XG5cdH1cblxuXHRyZXR1cm4gT2JqZWN0LmVudHJpZXMoZGF0YS5jaGlsZHJlbilcblx0XHQucmVkdWNlKChyZXN1bHRzLCBlbnRyeSkgPT4ge1xuXHRcdFx0Y29uc3QgW25hbWUsIGNoaWxkXSA9IGVudHJ5O1xuXHRcdFx0Y29uc3QgZ3JhbmRDaGlsZHJlbiA9IHNhbml0aXplTmF2aWdhdGlvblRyZWVEYXRhKGNoaWxkLCBoaWRlKTtcblx0XHRcdGlmIChncmFuZENoaWxkcmVuICYmIE9iamVjdC5rZXlzKGdyYW5kQ2hpbGRyZW4pLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0cmVzdWx0c1tuYW1lXSA9IGNoaWxkO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0fSwge30pO1xufVxuIl19